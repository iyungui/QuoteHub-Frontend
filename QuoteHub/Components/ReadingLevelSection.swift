//
//  ReadingLevelComponents.swift
//  QuoteHub
//
//  Created by Ïù¥ÏúµÏùò on 6/5/25.
//

import SwiftUI

// MARK: - Reading Level Section

struct ReadingLevelSection: View {
    let storyCount: Int
    
    var body: some View {
        let level = ReadingLevelManager.calculateLevel(storyCount: storyCount)
        
        VStack(spacing: 8) {
            HStack(spacing: 8) {
                Text(level.icon)
                    .font(.title2)
                
                Text(level.title)
                    .font(.scoreDream(.medium, size: .body))
                
                Text("Lv.\(level.level)")
                    .font(.scoreDreamCaption)
                    .padding(.horizontal, 8)
                    .padding(.vertical, 4)
                    .background(Color.appAccent.opacity(0.1))
                    .foregroundColor(.blue)
                    .cornerRadius(8)
            }
        }
    }
}


// MARK: - Compact Reading Level Badge (for smaller spaces)

struct CompactReadingLevelBadge: View {
    let storyCount: Int
    let showProgress: Bool
    let showChevron: Bool

    init(storyCount: Int, showProgress: Bool = false, showChevron: Bool = false) {
        self.storyCount = storyCount
        self.showProgress = showProgress
        self.showChevron = showChevron
    }
    
    var body: some View {
        let level = ReadingLevelManager.calculateLevel(storyCount: storyCount)
        
        HStack(spacing: 6) {
            Text(level.icon)
                .font(.caption)
            
            Text(level.title)
                .font(.scoreDream(.medium, size: .caption2))
            
            Text("Lv.\(level.level)")
                .font(.scoreDream(.bold, size: .caption2))
                .padding(.horizontal, 4)
                .padding(.vertical, 2)
                .background(Color.appAccent.opacity(0.1))
                .foregroundColor(.blue)
                .cornerRadius(4)
            
            if showProgress {
                let progress = ReadingLevelManager.calculateProgress(storyCount: storyCount)
                let nextLevelInfo = ReadingLevelManager.getNextLevelInfo(currentLevel: level.level)
                
                if !nextLevelInfo.isMaxLevel {
                    ProgressView(value: progress)
                        .progressViewStyle(LinearProgressViewStyle(tint: .appAccent.opacity(0.8)))
                        .frame(width: 40)
                        .scaleEffect(x: 1, y: 0.8, anchor: .center)
                }
            }
            
            if showChevron {
                Image(systemName: "chevron.right")
                    .font(.caption.weight(.medium))
                    .foregroundStyle(Color.appAccent.opacity(0.8))
            }
        }
    }
}

// MARK: - Level Statistics View (for detailed stats)

struct LevelStatisticsView: View {
    let storyCount: Int
    
    var body: some View {
        let level = ReadingLevelManager.calculateLevel(storyCount: storyCount)
        let nextLevelInfo = ReadingLevelManager.getNextLevelInfo(currentLevel: level.level)
        let progress = ReadingLevelManager.calculateProgress(storyCount: storyCount)
        let storiesLeft = ReadingLevelManager.storiesUntilNextLevel(storyCount: storyCount)
        
        VStack(spacing: 16) {
            // ÌòÑÏû¨ Î†àÎ≤® Ï†ïÎ≥¥
            HStack {
                VStack(alignment: .leading, spacing: 4) {
                    Text("ÌòÑÏû¨ Î†àÎ≤®")
                        .font(.scoreDream(.light, size: .caption))
                        .foregroundColor(.secondary)
                    
                    HStack(spacing: 6) {
                        Text(level.icon)
                            .font(.title3)
                        
                        Text(level.title)
                            .font(.scoreDream(.bold, size: .subheadline))
                        
                        Text("Lv.\(level.level)")
                            .font(.scoreDream(.medium, size: .caption))
                            .padding(.horizontal, 6)
                            .padding(.vertical, 2)
                            .background(Color.appAccent.opacity(0.1))
                            .foregroundColor(.blue)
                            .cornerRadius(6)
                    }
                }
                
                Spacer()
                
                // Ï¥ù Í∏∞Î°ù Ïàò
                VStack(alignment: .trailing, spacing: 4) {
                    Text("Ï¥ù Í∏∞Î°ù")
                        .font(.scoreDream(.light, size: .caption))
                        .foregroundColor(.secondary)
                    
                    Text("\(storyCount)Í∂å")
                        .font(.scoreDream(.bold, size: .subheadline))
                        .foregroundColor(.primary)
                }
            }
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(.ultraThinMaterial)
            )
            
            // Îã§Ïùå Î†àÎ≤®ÍπåÏßÄÏùò ÏßÑÌñâ ÏÉÅÌô©
            if !nextLevelInfo.isMaxLevel {
                VStack(spacing: 8) {
                    HStack {
                        Text("Îã§Ïùå Î†àÎ≤®: \(nextLevelInfo.nextLevelTitle)")
                            .font(.scoreDream(.medium, size: .subheadline))
                        
                        Spacer()
                        
                        Text("\(storiesLeft)Í∂å ÎÇ®Ïùå")
                            .font(.scoreDream(.light, size: .caption))
                            .foregroundColor(.secondary)
                    }
                    
                    ProgressView(value: progress)
                        .progressViewStyle(LinearProgressViewStyle(tint: .appAccent))
                        .scaleEffect(x: 1, y: 1.5, anchor: .center)
                }
                .padding()
                .background(
                    RoundedRectangle(cornerRadius: 12)
                        .fill(.ultraThinMaterial)
                )
            } else {
                // ÏµúÍ≥† Î†àÎ≤® Îã¨ÏÑ±
                VStack(spacing: 8) {
                    Text("üåü ÏµúÍ≥† Î†àÎ≤® Îã¨ÏÑ±! üåü")
                        .font(.scoreDream(.bold, size: .subheadline))
                        .foregroundColor(.appAccent)
                    
                    Text("ÏΩîÏä§Î™®Ïä§ÎßåÌÅº Í¥ëÌôúÌïú ÏßÄÏãùÏùÑ ÏåìÏúºÏÖ®Ïñ¥Ïöî!")
                        .font(.scoreDream(.light, size: .caption))
                        .foregroundColor(.secondary)
                        .multilineTextAlignment(.center)
                }
                .padding()
                .background(
                    RoundedRectangle(cornerRadius: 12)
                        .fill(Color.appAccent.opacity(0.1))
                )
            }
        }
    }
}

// MARK: - Preview

#Preview {
    VStack(spacing: 20) {
        ReadingLevelSection(storyCount: 25)
        
        ReadingProgressSection(storyCount: 25)
        
        CompactReadingLevelBadge(storyCount: 25, showProgress: true)
        
        LevelStatisticsView(storyCount: 150)
    }
    .padding()
}


//
//  ReadingLevelUsageExamples.swift
//  QuoteHub
//
//  Created by Ïù¥ÏúµÏùò on 6/5/25.
//

import SwiftUI

// MARK: - Ïä§ÌÜ†Î¶¨ Ïπ¥ÎìúÏóê ÏûëÏÑ±Ïûê Î†àÎ≤® ÌëúÏãú

struct StoryCardWithUserLevel: View {
    let story: BookStory
    let authorStoryCount: Int
    
    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            // Ïä§ÌÜ†Î¶¨ ÎÇ¥Ïö©
            Text(story.firstQuoteText)
                .font(.scoreDream(.medium, size: .body))
                .lineLimit(3)
            
            
            // ÏûëÏÑ±Ïûê Ï†ïÎ≥¥ + Î†àÎ≤®
            HStack {
                Text(story.userId.nickname)
                    .font(.scoreDream(.medium, size: .subheadline))
                
                CompactReadingLevelBadge(storyCount: authorStoryCount)
                
                Spacer()
                
                Text(story.createdAt.prefix(10))
                    .font(.scoreDreamCaption)
                    .foregroundColor(.secondary)
            }
        }
        .padding()
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(.ultraThinMaterial)
        )
    }
}

// MARK: - ÏÑ§Ï†ïÎ∑∞ÏóêÏÑú ÏÉÅÏÑ∏Ìïú Î†àÎ≤® ÌÜµÍ≥Ñ

struct UserStatsView: View {
    let storyCount: Int
    
    var body: some View {
        VStack(spacing: 20) {
            Text("ÎèÖÏÑú ÌÜµÍ≥Ñ")
                .font(.scoreDream(.bold, size: .title2))
            
            LevelStatisticsView(storyCount: storyCount)
            
            // Ï∂îÍ∞Ä ÌÜµÍ≥ÑÎì§...
            monthlyProgress
        }
        .padding()
    }
    
    private var monthlyProgress: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Ïù¥Î≤à Îã¨ ÏßÑÌñâ ÏÉÅÌô©")
                .font(.scoreDream(.bold, size: .subheadline))
            
            // Ïù¥Î≤à Îã¨ Î™©Ìëú vs Ïã§Ï†ú
            HStack {
                VStack(alignment: .leading) {
                    Text("Î™©Ìëú")
                        .font(.scoreDreamCaption)
                        .foregroundColor(.secondary)
                    Text("5Í∂å")
                        .font(.scoreDream(.bold, size: .body))
                }
                
                Spacer()
                
                VStack(alignment: .trailing) {
                    Text("Îã¨ÏÑ±")
                        .font(.scoreDreamCaption)
                        .foregroundColor(.secondary)
                    Text("3Í∂å")
                        .font(.scoreDream(.bold, size: .body))
                        .foregroundColor(.appAccent)
                }
            }
            
            ProgressView(value: 0.6)
                .progressViewStyle(LinearProgressViewStyle(tint: .appAccent))
        }
        .padding()
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(.ultraThinMaterial)
        )
    }
}


// MARK: - Ï†ÑÏ≤¥ ÏòàÏãú Î∑∞

struct ReadingLevelExamplesView: View {
    @State private var selectedStoryCount: Int = 25
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 30) {
                    // Ïä§ÌÜ†Î¶¨ Í∞úÏàò Ï°∞Ï†à
                    storyCountSlider
                    
                    Divider()
                    
                    // Îã§ÏñëÌïú Ïª¥Ìè¨ÎÑåÌä∏ ÏòàÏãúÎì§
                    VStack(spacing: 20) {
                        sectionTitle("Ìôà Î∞∞ÏßÄ")
                        HomeUserLevelBadge(storyCount: selectedStoryCount)
                        
                        sectionTitle("Í∏∞Î≥∏ Î†àÎ≤® ÏÑπÏÖò")
                        ReadingLevelSection(storyCount: selectedStoryCount)
                        
                        sectionTitle("ÌîÑÎ°úÍ∑∏Î†àÏä§ ÏÑπÏÖò")
                        ReadingProgressSection(storyCount: selectedStoryCount)
                        
                        sectionTitle("Ïª¥Ìå©Ìä∏ Î∞∞ÏßÄ")
                        HStack {
                            CompactReadingLevelBadge(storyCount: selectedStoryCount)
                            CompactReadingLevelBadge(storyCount: selectedStoryCount, showProgress: true)
                        }
                        
                        sectionTitle("ÏÉÅÏÑ∏ ÌÜµÍ≥Ñ")
                        LevelStatisticsView(storyCount: selectedStoryCount)
                        
                        sectionTitle("ÏÑ±Ï∑® Î∞∞ÏßÄ")
                        AchievementBadgesView(storyCount: selectedStoryCount)
                    }
                }
                .padding()
            }
            .navigationTitle("Î†àÎ≤® ÏãúÏä§ÌÖú ÏòàÏãú")
        }
    }
    
    private var storyCountSlider: some View {
        VStack(spacing: 12) {
            Text("Ïä§ÌÜ†Î¶¨ Í∞úÏàò: \(selectedStoryCount)")
                .font(.scoreDream(.bold, size: .subheadline))
            
            Slider(value: Binding(
                get: { Double(selectedStoryCount) },
                set: { selectedStoryCount = Int($0) }
            ), in: 0...350, step: 1)
            .accentColor(.appAccent)
        }
        .padding()
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(.ultraThinMaterial)
        )
    }
    
    private func sectionTitle(_ title: String) -> some View {
        HStack {
            Text(title)
                .font(.scoreDream(.bold, size: .body))
                .foregroundColor(.primary)
            Spacer()
        }
    }
}

// MARK: - Preview

#Preview {
    ReadingLevelExamplesView()
}
